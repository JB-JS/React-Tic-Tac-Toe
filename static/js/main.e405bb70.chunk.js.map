{"version":3,"sources":["index.js"],"names":["helper","squares","lines","i","length","a","b","c","Square","props","className","onClick","value","Board","this","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","user","step","setState","slice","concat","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","ReactDom","render","document","getElementById"],"mappings":"oNAIA,SAASA,EAAOC,GAeZ,IAdA,IAAMC,EAAQ,CAEV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GAEP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GAEP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGFC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACjBD,EAAMC,GADW,GAC5BE,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAGnC,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GAClE,OAAON,EAAQI,IAI3B,SAASG,EAAOC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACrCF,EAAMG,O,IAKbC,E,qLAEWV,GAAI,IAAD,OACZ,OACI,kBAACK,EAAD,CACII,MAAOE,KAAKL,MAAMR,QAAQE,GAC1BQ,QAAU,kBAAM,EAAKF,MAAME,QAAQR,Q,+BAK3C,OACI,6BACI,yBAAKO,UAAU,OACVI,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,IAEvB,yBAAKL,UAAU,OACVI,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,IAEvB,yBAAKL,UAAU,OACVI,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,S,GA1BnBC,IAAMC,WAiCpBC,E,YAEF,WAAYT,GAAQ,IAAD,8BACf,4CAAMA,KACDU,MAAQ,CACTC,QAAS,CAAC,CACNnB,QAASoB,MAAM,GAAGC,KAAK,QAE3BC,WAAY,EACZC,MAAM,GAPK,E,oEAWZC,GACHX,KAAKY,SAAS,CACVH,WAAYE,EACZD,KAAOC,EAAO,IAAO,M,kCAIjBtB,GACR,IAAMiB,EAAUN,KAAKK,MAAMC,QAAQO,MAAM,EAAGb,KAAKK,MAAMI,WAAa,GAE9DtB,EADUmB,EAAQA,EAAQhB,OAAO,GACfH,QAAQ0B,QAE5B3B,EAAOC,IAAYA,EAAQE,KAG/BF,EAAQE,GAAKW,KAAKK,MAAMK,KAAO,IAAM,IAErCV,KAAKY,SAAS,CACVN,QAASA,EAAQQ,OAAO,CAAC,CACrB3B,QAASA,KAEbsB,WAAYH,EAAQhB,OACpBoB,MAAOV,KAAKK,MAAMK,U,+BAIhB,IAkBFK,EAlBC,OACCT,EAAUN,KAAKK,MAAMC,QACrBU,EAAUV,EAAQN,KAAKK,MAAMI,YAC7BQ,EAAS/B,EAAO8B,EAAQ7B,SAExB+B,EAAQZ,EAAQa,KAAI,SAACR,EAAMS,GAC7B,IAAMC,EAAOD,EACb,eAAiBA,EACjB,mBACA,OACI,wBAAIE,IAAKF,GACL,4BAAQvB,QAAS,kBAAM,EAAK0B,OAAOH,KAC9BC,OAajB,OAJIN,EADAE,EACS,WAAaA,EAEb,iBAAmBjB,KAAKK,MAAMK,KAAO,IAAM,KAGpD,yBAAKd,UAAU,QACX,yBAAKA,UAAU,cACX,kBAACG,EAAD,CACIZ,QAAS6B,EAAQ7B,QACjBU,QAAS,SAACR,GAAD,OAAO,EAAKmC,YAAYnC,OAGzC,yBAAKO,UAAU,aACX,yBAAKA,UAAU,UAAUmB,GACzB,4BAAKG,S,GA1ENhB,IAAMC,WAkFzBsB,IAASC,OAAO,kBAACtB,EAAD,MAASuB,SAASC,eAAe,U","file":"static/js/main.e405bb70.chunk.js","sourcesContent":["import React, { useImperativeHandle } from \"react\";\r\nimport ReactDom from \"react-dom\"\r\nimport \"./index.css\";\r\n\r\nfunction helper(squares) {\r\n    const lines = [\r\n        // 가로 인덱스 번호\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        // 세로 인덱스 번호\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        // 대각선 인덱스 번호\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c])\r\n            return squares[a]\r\n    }\r\n}\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className=\"square\" onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n    renderSquare(i) {\r\n        return (\r\n            <Square \r\n                value={this.props.squares[i]}\r\n                onClick ={() => this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n    render() {\r\n        return (\r\n            <div>                \r\n                <div className=\"row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            stepNumber: 0,\r\n            user: true,\r\n        }\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            user: (step % 2) === 0,\r\n        });\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length-1];\r\n        const squares = current.squares.slice();\r\n        // 누가 이겼거나 또는 클릭한곳이 값이 있을경우\r\n        if (helper(squares) || squares[i])\r\n            return;\r\n        // 스퀘워에 값을 할당할당 \r\n        squares[i] = this.state.user ? 'X' : 'O';\r\n        // 사각형의 값을 바꿔줍니다.\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares\r\n            }]),\r\n            stepNumber: history.length,\r\n            user: !this.state.user,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = helper(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ?\r\n            'Go to move #' + move :\r\n            'Go to game start';\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}>\r\n                        {desc}\r\n                    </button>\r\n                </li>\r\n            )\r\n        })\r\n\r\n        let status;\r\n\r\n        if (winner)\r\n            status = 'Winner  ' + winner;\r\n        else\r\n            status = 'Next player: ' + (this.state.user ? 'X' : 'O');\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board \r\n                        squares={current.squares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div className=\"status\">{status}</div>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// 가상 버츄얼 돔\r\nReactDom.render(<Game/>, document.getElementById(\"root\"));"],"sourceRoot":""}